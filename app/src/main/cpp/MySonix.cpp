//
// Created by AivenLau on 2016/12/12.
//

extern int nWifiInterface;
#include <unistd.h>
#include <linux/in.h>
#include <endian.h>
#include "MySonix.h"
#include "Defines.h"
#include <netdb.h>
#include <arpa/inet.h>

//extern char wlan[256];
typedef unsigned char byte;


#if 1

 byte  mQParameterCF10[1024] = //129bytes
        {
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x03,
                0x02, 0x02,
                0x03, 0x02, 0x02, 0x03, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x05, 0x08, 0x05,
                0x05, 0x04,
                0x04, 0x05, 0x0a, 0x07, 0x08, 0x06, 0x08, 0x0c, 0x0b, 0x0d, 0x0d, 0x0c, 0x0b, 0x0c,
                0x0c, 0x0e,
                0x0f, 0x14, 0x11, 0x0e, 0x0f, 0x13, 0x0f, 0x0c, 0x0c, 0x11, 0x18, 0x11, 0x13, 0x15,
                0x15, 0x16,
                0x17, 0x16, 0x0d, 0x11, 0x19, 0x1a, 0x18, 0x16, 0x1a, 0x14, 0x16, 0x16, 0x15, 0x01,
                0x03, 0x03,
                0x03, 0x05, 0x04, 0x05, 0x0a, 0x05, 0x05, 0x0a, 0x15, 0x0e, 0x0c, 0x0e, 0x0e, 0x15,
                0x15, 0x15,
                0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
                0x15, 0x15,
                0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
                0x15, 0x15,
                0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00
        };

 byte mQParameterCF15[] =
        {
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x05,
                0x03, 0x03,
                0x04, 0x03, 0x03, 0x05, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x07, 0x0d, 0x08,
                0x07, 0x07,
                0x07, 0x07, 0x10, 0x0b, 0x0c, 0x09, 0x0d, 0x13, 0x10, 0x14, 0x13, 0x12, 0x10, 0x12,
                0x12, 0x15,
                0x17, 0x1e, 0x19, 0x15, 0x16, 0x1c, 0x16, 0x12, 0x12, 0x1a, 0x23, 0x1a, 0x1c, 0x1f,
                0x20, 0x21,
                0x22, 0x21, 0x14, 0x19, 0x25, 0x27, 0x24, 0x20, 0x27, 0x1e, 0x21, 0x21, 0x20, 0x01,
                0x05, 0x05,
                0x05, 0x07, 0x06, 0x07, 0x0f, 0x08, 0x08, 0x0f, 0x20, 0x15, 0x12, 0x15, 0x15, 0x20,
                0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00
        };

 byte mQParameterCF20[] =
        {
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x06,
                0x04, 0x05,
                0x06, 0x05, 0x04, 0x06, 0x06, 0x05, 0x06, 0x07, 0x07, 0x06, 0x08, 0x0a, 0x11, 0x0b,
                0x0a, 0x09,
                0x09, 0x0a, 0x15, 0x0f, 0x10, 0x0c, 0x11, 0x19, 0x16, 0x1a, 0x1a, 0x18, 0x16, 0x18,
                0x17, 0x1b,
                0x1f, 0x28, 0x21, 0x1b, 0x1d, 0x25, 0x1e, 0x17, 0x18, 0x22, 0x2f, 0x23, 0x25, 0x29,
                0x2a, 0x2c,
                0x2d, 0x2c, 0x1b, 0x21, 0x31, 0x34, 0x30, 0x2b, 0x34, 0x28, 0x2b, 0x2c, 0x2b, 0x01,
                0x07, 0x07,
                0x07, 0x0a, 0x09, 0x0a, 0x14, 0x0b, 0x0b, 0x14, 0x2b, 0x1c, 0x18, 0x1c, 0x1c, 0x2b,
                0x2b, 0x2b,
                0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b,
                0x2b, 0x2b,
                0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b,
                0x2b, 0x2b,
                0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00
        };

 byte mQParameterCF25[] =
        {
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x08,
                0x05, 0x06,
                0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0a, 0x0d, 0x15, 0x0e,
                0x0d, 0x0b,
                0x0b, 0x0d, 0x1a, 0x12, 0x14, 0x0f, 0x15, 0x1f, 0x1b, 0x21, 0x20, 0x1e, 0x1b, 0x1e,
                0x1d, 0x22,
                0x27, 0x31, 0x2a, 0x22, 0x24, 0x2f, 0x25, 0x1d, 0x1e, 0x2b, 0x3b, 0x2b, 0x2f, 0x33,
                0x35, 0x37,
                0x38, 0x37, 0x21, 0x29, 0x3d, 0x41, 0x3c, 0x36, 0x41, 0x31, 0x36, 0x37, 0x35, 0x01,
                0x09, 0x09,
                0x09, 0x0d, 0x0b, 0x0d, 0x19, 0x0e, 0x0e, 0x19, 0x35, 0x23, 0x1e, 0x23, 0x23, 0x35,
                0x35, 0x35,
                0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
                0x35, 0x35,
                0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
                0x35, 0x35,
                0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00
        };

 byte mQParameterCF30[] =
        {
                /*
                0x0E, 0x0A, 0x0B,
                0x0D, 0x0B, 0x09, 0x0E, 0x0D, 0x0C, 0x0D, 0x10, 0x0F, 0x0E, 0x11, 0x16, 0x25, 0x18, 0x16, 0x14,
                0x14, 0x16, 0x2D, 0x20, 0x22, 0x1B, 0x25, 0x36, 0x2F, 0x38, 0x37, 0x35, 0x2F, 0x34, 0x33, 0x3B,
                0x43, 0x55, 0x48, 0x3B, 0x3F, 0x51, 0x40, 0x33, 0x34, 0x4A, 0x65, 0x4B, 0x51, 0x58, 0x5B, 0x60,
                0x61, 0x60, 0x39, 0x47, 0x69, 0x70, 0x68, 0x5D, 0x6F, 0x55, 0x5E, 0x60, 0x5C, 0x01, 0x0F, 0x10,
                0x10, 0x16, 0x13, 0x16, 0x2B, 0x18, 0x18, 0x2B, 0x5C, 0x3D, 0x34, 0x3D, 0x3D, 0x5C, 0x5C, 0x5C,
                0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
                0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
                0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C
                 */

                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x0e,
                0x0a, 0x0b,
                0x0d, 0x0b, 0x09, 0x0e, 0x0d, 0x0c, 0x0d, 0x10, 0x0f, 0x0e, 0x11, 0x16, 0x25, 0x18,
                0x16, 0x14,
                0x14, 0x16, 0x2d, 0x20, 0x22, 0x1b, 0x25, 0x36, 0x2f, 0x38, 0x37, 0x35, 0x2f, 0x34,
                0x33, 0x3b,
                0x43, 0x55, 0x48, 0x3b, 0x3f, 0x51, 0x40, 0x33, 0x34, 0x4a, 0x65, 0x4b, 0x51, 0x58,
                0x5b, 0x60,
                0x61, 0x60, 0x39, 0x47, 0x69, 0x70, 0x68, 0x5d, 0x6f, 0x55, 0x5e, 0x60, 0x5c, 0x01,
                0x0f, 0x10,
                0x10, 0x16, 0x13, 0x16, 0x2b, 0x18, 0x18, 0x2b, 0x5c, 0x3d, 0x34, 0x3d, 0x3d, 0x5c,
                0x5c, 0x5c,
                0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
                0x5c, 0x5c,
                0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
                0x5c, 0x5c,
                0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00


        };

 byte mQParameterCF35[] =
        {
                /*
                0x15, 0x0E, 0x10,
                0x12, 0x10, 0x0D, 0x15, 0x12, 0x11, 0x12, 0x18, 0x17, 0x15, 0x19, 0x20, 0x36, 0x23, 0x20, 0x1D,
                0x1D, 0x20, 0x42, 0x2F, 0x32, 0x27, 0x36, 0x4E, 0x45, 0x52, 0x51, 0x4D, 0x45, 0x4B, 0x4A, 0x56,
                0x61, 0x7C, 0x69, 0x56, 0x5C, 0x75, 0x5D, 0x4A, 0x4B, 0x6C, (byte) 0x93, 0x6D, 0x75, (byte) 0x80, (byte) 0x84, (byte) 0x8B,
                (byte) 0x8C, (byte) 0x8B, 0x53, 0x68, (byte) 0x98, (byte) 0xA3, (byte) 0x97, (byte) 0x87, (byte) 0xA2, 0x7C, (byte) 0x88, (byte) 0x8B, (byte) 0x85, 0x01, 0x17, 0x18,
                0x18, 0x20, 0x1C, 0x20, 0x3F, 0x23, 0x23, 0x3F, (byte) 0x85, 0x59, 0x4B, 0x59, 0x59, (byte) 0x85, (byte) 0x85, (byte) 0x85,
                (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85,
                (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85,
                (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85, (byte) 0x85
                 */
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x15,
                0x0e, 0x10,
                0x12, 0x10, 0x0d, 0x15, 0x12, 0x11, 0x12, 0x18, 0x17, 0x15, 0x19, 0x20, 0x36, 0x23,
                0x20, 0x1d,
                0x1d, 0x20, 0x42, 0x2f, 0x32, 0x27, 0x36, 0x4e, 0x45, 0x52, 0x51, 0x4d, 0x45, 0x4b,
                0x4a, 0x56,
                0x61, 0x7c, 0x69, 0x56, 0x5c, 0x75, 0x5d, 0x4a, 0x4b, 0x6c, 0x93, 0x6d, 0x75, 0x80,
                0x84, 0x8b,
                0x8c, 0x8b, 0x53, 0x68, 0x98, 0xa3, 0x97, 0x87, 0xa2, 0x7c, 0x88, 0x8b, 0x85, 0x01,
                0x17, 0x18,
                0x18, 0x20, 0x1c, 0x20, 0x3f, 0x23, 0x23, 0x3f, 0x85, 0x59, 0x4b, 0x59, 0x59, 0x85,
                0x85, 0x85,
                0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
                0x85, 0x85,
                0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
                0x85, 0x85,
                0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00

        };

 byte mQParameterCF40[] =
        {
                /*
                0x1C, 0x13, 0x15,
                0x19, 0x15, 0x12, 0x1C, 0x19, 0x17, 0x19, 0x20, 0x1E, 0x1C, 0x22, 0x2B, 0x48, 0x2E, 0x2B, 0x27,
                0x27, 0x2B, 0x58, 0x3F, 0x42, 0x34, 0x48, 0x68, 0x5C, 0x6E, 0x6C, 0x66, 0x5C, 0x65, 0x63, 0x73,
                (byte) 0x82, (byte) 0xA6, (byte) 0x8C, 0x73, 0x7A, (byte) 0x9D, 0x7C, 0x63, 0x65, (byte) 0x90, (byte) 0xC4, (byte) 0x92, (byte) 0x9D, (byte) 0xAB, (byte) 0xB1, (byte) 0xBA,
                (byte) 0xBB, (byte) 0xBA, 0x6F, (byte) 0x8B, (byte) 0xCC, (byte) 0xDA, (byte) 0xCA, (byte) 0xB4, (byte) 0xD8, (byte) 0xA6, (byte) 0xB6, (byte) 0xBA, (byte) 0xB2, 0x01, 0x1E, 0x20,
                0x20, 0x2B, 0x25, 0x2B, 0x54, 0x2E, 0x2E, 0x54, (byte) 0xB2, 0x77, 0x65, 0x77, 0x77, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2,
                (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2,
                (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2,
                (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2, (byte) 0xB2
                 */
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x1c,
                0x13, 0x15,
                0x19, 0x15, 0x12, 0x1c, 0x19, 0x17, 0x19, 0x20, 0x1e, 0x1c, 0x22, 0x2b, 0x48, 0x2e,
                0x2b, 0x27,
                0x27, 0x2b, 0x58, 0x3f, 0x42, 0x34, 0x48, 0x68, 0x5c, 0x6e, 0x6c, 0x66, 0x5c, 0x65,
                0x63, 0x73,
                0x82, 0xa6, 0x8c, 0x73, 0x7a, 0x9d, 0x7c, 0x63, 0x65, 0x90, 0xc4, 0x92, 0x9d, 0xab,
                0xb1, 0xba,
                0xbb, 0xba, 0x6f, 0x8b, 0xcc, 0xda, 0xca, 0xb4, 0xd8, 0xa6, 0xb6, 0xba, 0xb2, 0x01,
                0x1e, 0x20,
                0x20, 0x2b, 0x25, 0x2b, 0x54, 0x2e, 0x2e, 0x54, 0xb2, 0x77, 0x65, 0x77, 0x77, 0xb2,
                0xb2, 0xb2,
                0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2,
                0xb2, 0xb2,
                0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2,
                0xb2, 0xb2,
                0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00

        };

 byte mQParameterCF45[] =
        {
                /*
                0x24, 0x19, 0x1B,
                0x20, 0x1B, 0x16, 0x24, 0x20, 0x1D, 0x20, 0x29, 0x27, 0x24, 0x2B, 0x37, 0x5B, 0x3B, 0x37, 0x32,
                0x32, 0x37, 0x70, 0x50, 0x55, 0x42, 0x5B, (byte) 0x85, 0x75, (byte) 0x8C, (byte) 0x89, (byte) 0x83, 0x75, (byte) 0x80, 0x7E, (byte) 0x93,
                (byte) 0xA5, (byte) 0xD3, (byte) 0xB3, (byte) 0x93, (byte) 0x9C, (byte) 0xC8, (byte) 0x9E, 0x7E, (byte) 0x80, (byte) 0xB7, (byte) 0xFA, (byte) 0xBA, (byte) 0xC8, (byte) 0xDA, (byte) 0xE1, (byte) 0xEC,
                (byte) 0xEF, (byte) 0xEC, (byte) 0x8E, (byte) 0xB1, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xE5, (byte) 0xFF, (byte) 0xD3, (byte) 0xE8, (byte) 0xEC, (byte) 0xE3, 0x01, 0x27, 0x29,
                0x29, 0x37, 0x30, 0x37, 0x6C, 0x3B, 0x3B, 0x6C, (byte) 0xE3, (byte) 0x97, (byte) 0x80, (byte) 0x97, (byte) 0x97, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3,
                (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3,
                (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3,
                (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3, (byte) 0xE3
                 */
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x24,
                0x19, 0x1b,
                0x20, 0x1b, 0x16, 0x24, 0x20, 0x1d, 0x20, 0x29, 0x27, 0x24, 0x2b, 0x37, 0x5b, 0x3b,
                0x37, 0x32,
                0x32, 0x37, 0x70, 0x50, 0x55, 0x42, 0x5b, 0x85, 0x75, 0x8c, 0x89, 0x83, 0x75, 0x80,
                0x7e, 0x93,
                0xa5, 0xd3, 0xb3, 0x93, 0x9c, 0xc8, 0x9e, 0x7e, 0x80, 0xb7, 0xfa, 0xba, 0xc8, 0xda,
                0xe1, 0xec,
                0xef, 0xec, 0x8e, 0xb1, 0xff, 0xff, 0xff, 0xe5, 0xff, 0xd3, 0xe8, 0xec, 0xe3, 0x01,
                0x27, 0x29,
                0x29, 0x37, 0x30, 0x37, 0x6c, 0x3b, 0x3b, 0x6c, 0xe3, 0x97, 0x80, 0x97, 0x97, 0xe3,
                0xe3, 0xe3,
                0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3,
                0xe3, 0xe3,
                0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3,
                0xe3, 0xe3,
                0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00

        };

 byte mQParameterCF50[] =
        {
                /*
                0x2D, 0x1F, 0x22,
                0x27, 0x22, 0x1C, 0x2D, 0x27, 0x24, 0x27, 0x33, 0x30, 0x2D, 0x35, 0x44, 0x71, 0x49, 0x44, 0x3E,
                0x3E, 0x44, (byte) 0x8B, 0x63, 0x69, 0x52, 0x71, (byte) 0xA4, (byte) 0x90, (byte) 0xAD, (byte) 0xAA, (byte) 0xA1, (byte) 0x90, (byte) 0x9E, (byte) 0x9C, (byte) 0xB5,
                (byte) 0xCC, (byte) 0xFF, (byte) 0xDD, (byte) 0xB5, (byte) 0xC1, (byte) 0xF7, (byte) 0xC3, (byte) 0x9C, (byte) 0x9E, (byte) 0xE3, (byte) 0xFF, (byte) 0xE5, (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xB0, (byte) 0xDA, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, 0x01, 0x30, 0x33,
                0x33, 0x44, 0x3B, 0x44, (byte) 0x85, 0x49, 0x49, (byte) 0x85, (byte) 0xFF, (byte) 0xBB, (byte) 0x9E, (byte) 0xBB, (byte) 0xBB, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xC4
                 */
                /*0x01,(byte) 0xA2,0x00,0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x10,
                0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D,
                0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
                0x22,0x71,0x14,0x32,(byte) 0x81,(byte) 0x91,(byte) 0xA1,0x08,0x23,0x42,(byte) 0xB1,(byte) 0xC1,0x15,0x52,(byte) 0xD1,(byte) 0xF0,
                0x24,0x33,0x62,0x72,(byte) 0x82,0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,
                0x29,0x2A,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
                0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
                0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,(byte) 0x83,(byte) 0x84,(byte) 0x85,(byte) 0x86,(byte) 0x87,(byte) 0x88,(byte) 0x89,
                (byte) 0x8A,(byte) 0x92,(byte) 0x93,(byte) 0x94,(byte) 0x95,(byte) 0x96,(byte) 0x97,(byte) 0x98,(byte) 0x99,(byte) 0x9A,(byte) 0xA2,(byte) 0xA3,(byte) 0xA4,(byte) 0xA5,(byte) 0xA6,(byte) 0xA7,
                (byte) 0xA8,(byte) 0xA9,(byte) 0xAA,(byte) 0xB2,(byte) 0xB3,(byte) 0xB4,(byte) 0xB5,(byte) 0xB6,(byte) 0xB7,(byte) 0xB8,(byte) 0xB9,(byte) 0xBA,(byte) 0xC2,(byte) 0xC3,(byte) 0xC4,(byte) 0xC5,
                (byte) 0xC6,(byte) 0xC7,(byte) 0xC8,(byte) 0xCA,(byte) 0xD2,(byte) 0xD3,(byte) 0xD4,(byte) 0xD5,(byte) 0xD6,(byte) 0xD7,(byte) 0xD8,(byte) 0xD9,(byte) 0xDA,(byte) 0xE1,(byte) 0xE2,
                (byte) 0xE3,(byte) 0xE4,(byte) 0xE5,(byte) 0xE6,(byte) 0xE7,(byte) 0xE8,(byte) 0xE9,(byte) 0xEA,(byte) 0xF1,(byte) 0xF2,(byte) 0xF3,(byte) 0xF4,(byte) 0xF5,(byte) 0xF6,(byte) 0xF7,(byte) 0xF8,
                (byte) 0xF9,(byte) 0xFA,0x01,0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,
                0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x11,
                0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77,
                0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
                0x13,0x22,0x32,(byte) 0x81,0x08,0x14,0x42,(byte) 0x91,(byte) 0xA1,(byte) 0xB1,(byte) 0xC1,0x09,0x23,0x33,0x52,(byte) 0xF0,
                0x15,0x62,0x72,(byte) 0xD1,0x0A,0x16,0x24,0x34,(byte) 0xE1,0x25,(byte) 0xF1,0x17,0x18,0x19,0x1A,0x26,
                0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,
                0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,
                0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,(byte) 0x82,(byte) 0x83,(byte) 0x84,(byte) 0x85,(byte) 0x86,(byte) 0x87,
                (byte) 0x88,(byte) 0x89,(byte) 0x8A,(byte) 0x92,(byte) 0x93,(byte) 0x94,(byte) 0x95,(byte) 0x96,(byte) 0x97,(byte) 0x98,(byte) 0x99,(byte) 0x9A,(byte) 0xA2,(byte) 0xA3,(byte) 0xA4,(byte) 0xA5,
                (byte) 0xA6,(byte) 0xA7,(byte) 0xA8,(byte) 0xA9,(byte) 0xAA,(byte) 0xB2,(byte) 0xB3,(byte) 0xB4,(byte) 0xB5,(byte) 0xB6,(byte) 0xB7,(byte) 0xB8,(byte) 0xB9,(byte) 0xBA,(byte) 0xC2,(byte) 0xC3,
                (byte) 0xC4,(byte) 0xC5,(byte) 0xC6,(byte) 0xC7,(byte) 0xC8,(byte) 0xC9,(byte) 0xCA,(byte) 0xD2,(byte) 0xD3,(byte) 0xD4,(byte) 0xD5,(byte) 0xD6,(byte) 0xD7,(byte) 0xD8,(byte) 0xD9,(byte) 0xDA,
                (byte) 0xE2,(byte) 0xE3,(byte) 0xE4,(byte) 0xE5,(byte) 0xE6,(byte) 0xE7,(byte) 0xE8,(byte) 0xE9,(byte) 0xEA,(byte) 0xF2,(byte) 0xF3,(byte) 0xF4,(byte) 0xF5,(byte) 0xF6,(byte) 0xF7,(byte) 0xF8,
                (byte) 0xF9,(byte) 0xFA,(byte) 0xFF,(byte) 0xDA,0x00,0x0C,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3F,0x00,*/
                0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x01,
                0x01, 0x2c,
                0x01, 0x2c, 0x00, 0x00, 0xff, 0xed, 0x00, 0x9c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
                0x68, 0x6f,
                0x70, 0x20, 0x33, 0x2e, 0x30, 0x00, 0x38, 0x42, 0x49, 0x4d, 0x04, 0x04, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x7f, 0x1c, 0x02, 0x05, 0x00, 0x14, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x4a,
                0x50, 0x45, 0x47, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1c, 0x02, 0x73,
                0x00, 0x12,
                0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30, 0x20, 0x43, 0x49, 0x53, 0x20, 0x4d, 0x6f,
                0x64, 0x75,
                0x6c, 0x65, 0x1c, 0x02, 0x50, 0x00, 0x12, 0x53, 0x4e, 0x43, 0x37, 0x33, 0x30, 0x30,
                0x20, 0x53,
                0x41, 0x32, 0x44, 0x53, 0x50, 0x54, 0x45, 0x41, 0x4d, 0x1c, 0x02, 0x74, 0x00, 0x17,
                0x53, 0x4f,
                0x4e, 0x49, 0x58, 0x2e, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
                0x2e, 0x43,
                0x4f, 0x2e, 0x4c, 0x54, 0x44, 0x1c, 0x02, 0x78, 0x00, 0x17, 0x68, 0x74, 0x74, 0x70,
                0x3a, 0x2f,
                0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x6f, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
                0x2e, 0x74,
                0x77, 0x00, 0xff, 0xfe, 0x01, 0x01, 0x30, 0x0f, 0xfb, 0x06, 0x70, 0x01, 0x00, 0x00,
                0x70, 0x01,
                0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                0x1c, 0x02,
                0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00,
                0x80, 0x02,
                0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00,
                0x00, 0x03,
                0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
                0xec, 0x01,
                0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00,
                0xb8, 0x02,
                0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
                0x2c, 0x03,
                0x00, 0x00, 0x74, 0x06, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x50, 0x05, 0x00, 0x00,
                0xe0, 0x03,
                0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00,
                0xfc, 0x03,
                0x00, 0x00, 0xd4, 0x0a, 0x00, 0x00, 0x22, 0x09, 0x00, 0x00, 0xec, 0x04, 0x00, 0x00,
                0x50, 0x04,
                0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
                0xbe, 0x0b,
                0x00, 0x00, 0x72, 0x0c, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x10, 0x05, 0x00, 0x00,
                0x10, 0x05,
                0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x10, 0x0b, 0x00, 0x00, 0xda, 0x0d, 0x00, 0x00,
                0x4c, 0x08,
                0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x64, 0x0f, 0x00, 0x00,
                0xa8, 0x15,
                0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xe4, 0x0c, 0x00, 0x00, 0xda, 0x13, 0x00, 0x00,
                0x44, 0x20,
                0x00, 0x00, 0xd8, 0x17, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0xd8, 0x38, 0x00, 0x00,
                0xd8, 0x38,
                0x00, 0x00, 0x40, 0x83, 0x00, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x01, 0xe0, 0x02, 0x80,
                0x03, 0x01,
                0x21, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xdb, 0x00, 0x84, 0x00, 0x2d,
                0x1f, 0x22,
                0x27, 0x22, 0x1c, 0x2d, 0x27, 0x24, 0x27, 0x33, 0x30, 0x2d, 0x35, 0x44, 0x71, 0x49,
                0x44, 0x3e,
                0x3e, 0x44, 0x8b, 0x63, 0x69, 0x52, 0x71, 0xa4, 0x90, 0xad, 0xaa, 0xa1, 0x90, 0x9e,
                0x9c, 0xb5,
                0xcc, 0xff, 0xdd, 0xb5, 0xc1, 0xf7, 0xc3, 0x9c, 0x9e, 0xe3, 0xff, 0xe5, 0xf7, 0xff,
                0xff, 0xff,
                0xff, 0xff, 0xb0, 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
                0x30, 0x33,
                0x33, 0x44, 0x3b, 0x44, 0x85, 0x49, 0x49, 0x85, 0xff, 0xbb, 0x9e, 0xbb, 0xbb, 0xff,
                0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xc4,
                0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x10,
                0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
                0x01, 0x7d,
                0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51,
                0x61, 0x07,
                0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
                0xd1, 0xf0,
                0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26,
                0x27, 0x28,
                0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49,
                0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69,
                0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89,
                0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                0xa6, 0xa7,
                0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                0xc4, 0xc5,
                0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                0xe1, 0xe2,
                0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
                0x0b, 0x11,
                0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
                0x02, 0x77,
                0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
                0x61, 0x71,
                0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
                0x52, 0xf0,
                0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
                0x1a, 0x26,
                0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48,
                0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68,
                0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
                0x86, 0x87,
                0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
                0xa4, 0xa5,
                0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
                0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
                0xd9, 0xda,
                0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
                0xf7, 0xf8,
                0xf9, 0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00,
                0x3f, 0x00


        };


static const byte mQParameterCF70[] =
        {

                /*
                0x50, 0x37, 0x3C, 0x46, 0x3C, 0x32, 0x50, 0x46, 0x41, 0x46, 0x5A, 0x55, 0x50, 0x5F, 0x78, (byte) 0xC8,
                (byte) 0x82, 0x78, 0x6E, 0x6E, 0x78, (byte) 0xF5, (byte) 0xAF, (byte) 0xB9, (byte) 0x91, (byte) 0xC8, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                0x01, 0x55, 0x5A, 0x5A, 0x78, 0x69, 0x78, (byte) 0xEB, (byte) 0x82, (byte) 0x82, (byte) 0xEB, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF
                 */
        };
#endif

pthread_mutex_t MySonix::mutex = PTHREAD_MUTEX_INITIALIZER;

MySonix::MySonix() : videofd(-1), isCancelled(false), readid(-1), dispid(-1), bFlip(false),
                     commandfd(-1), _alreadyBind(false), _isWaiting(false), uartCommandfd(-1),
                     readid_cfg(-1), b480(false), udp_socket(-1), rev_cmd_thread(-1) {
    mjpgFrame.reserve(64 * 1024);
    mIsFirstPacket = false;
    readBuff = new char[1460];
    readBuff_cfg = new char[1460];
    F_Set480(false);
}

void MySonix::F_Set480(bool b) {
    int width = 480;
    if (!b) {
        width = 360;
    }


    mQParameterCF10[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF10[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF15[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF15[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF20[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF20[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF25[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF25[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF30[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF30[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF35[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF35[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF40[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF40[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF45[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF45[0x10 * 27 + 0x0B] = (byte) (width);

    mQParameterCF50[0x10 * 27 + 0x0A] = (byte) (width >> 8);
    mQParameterCF50[0x10 * 27 + 0x0B] = (byte) (width);


}

MySonix::~MySonix() {
    pthread_mutex_destroy(&mutex);
    if (videofd != -1) {
        close(videofd);
        videofd = -1;
    }
    if (commandfd != -1) {
        close(commandfd);
        commandfd = -1;
    }
    if (uartCommandfd != -1) {
        close(uartCommandfd);
        uartCommandfd = -1;
    }
    vector<char>().swap(mjpgFrame);   //clear mjpgPacket
    vector<char>().swap(mjpgPacket);   //clear mjpgPacket
    delete[]readBuff;
    delete[]readBuff_cfg;
}

void MySonix::closeVideoSocket(void) {
    void *ret = nullptr;

    isCancelled = true;
    usleep(1000 * 2);

    if (readid != -1) {
        pthread_join(readid, &ret);
        LOGE("CloseReadid close!");
        readid = -1;
    }
    if (dispid != -1) {
        pthread_join(dispid, &ret);
        LOGE("CloseDispid close!");
        dispid = -1;
    }
    if (videofd > 0) {
        LOGE("videosocket close!");
        shutdown(videofd, 0);
        close(videofd);
        videofd = -1;
    }

    if (rev_cmd_thread  != -1) {
        pthread_join(rev_cmd_thread , &ret);
        LOGE("CloseREvCmd close!");
        rev_cmd_thread  = -1;
    }
    myFrameList.clear();

}

void MySonix::closeCommandSocket(void) {
    _isWaiting = false;
    _alreadyBind = false;
    if (commandfd > 0) {
        LOGE("command close!");
        shutdown(commandfd, 0);
        close(commandfd);

    }
    if (uartCommandfd > 0) {
        shutdown(uartCommandfd, 0);
        close(uartCommandfd);

    }

    if (udp_socket > 0) {
        shutdown(udp_socket, 0);
        close(udp_socket);
    }
    usleep(1000 * 50);
    uartCommandfd = -1;
    udp_socket = -1;
    commandfd = -1;


}


void MySonix::sendGetCfgCmd(void) {
    LOGE("%s", __func__);
    char buf_[2] = {COMMAND_TAG, COMMAND_GETCFG};
    //for (int i = 0; i < 5; i++)
    {
        sendCommand((char *) buf_, 2);
    }
}

void MySonix::sendStart(void) {
    LOGE("%s", __func__);
    char buf_[2] = {COMMAND_TAG, COMMAND_START};
    //for (int i = 0; i < 5; i++)
    {
        sendCommand((char *) buf_, 2);
    }
}


void MySonix::sendStop(void) {
    LOGE("%s", __func__);
    byte buf_[2] = {COMMAND_TAG, COMMAND_STOP};

    for (int i = 0; i < 5; i++) {
        sendCommand((char *) buf_, 2);
    }
}

void MySonix::sendCommand(char *command, int length) {

    if (!_alreadyBind) {
        return;
    }

    unsigned int size;    /* the length of servaddr */
    struct sockaddr_in servaddr; /* the server's full addr */
    struct hostent *hp;   /* holds IP address of server */
    char data[1024];  /* request */

    memset(data, 0, 1024);
    memcpy(data, command, length);


    bzero((char *) &servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(COMMAND_SOCKET_PORT);
    servaddr.sin_addr.s_addr = inet_addr("192.168.123.1");

    size = sizeof(servaddr);
    ssize_t res = sendto(commandfd, data, length, 0, (struct sockaddr *) &servaddr, size);
    if (res < 0) {
        LOGE("write error");
    }

}

int MySonix::createVideoSocket(void) {
    if (videofd != -1) {
        return 0;
    }
    struct sockaddr_in myaddr;
    if ((videofd = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP)) < 0) {
        LOGE("Failed to create socket");
        return -1;
    }

    if(nWifiInterface!=-1) {
        setsockopt(videofd, IPPROTO_IP, SO_BINDTODEVICE, &nWifiInterface, sizeof(nWifiInterface));
    }
   // setsockopt(videofd, SOL_SOCKET, SO_BINDTODEVICE, wlan, strlen(wlan));
    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = 500000;  //500ms
    if (setsockopt(videofd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {
        LOGE("Failed to setsockopt");
        shutdown(videofd, 0);
        close(videofd);
        videofd = -1;
        return -2;

    }

    //dest_addr.sin_addr.s_addr = inet_addr(this->host.c_str());

    bzero((char *) &myaddr, sizeof(myaddr));
    myaddr.sin_family = AF_INET;
    myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    myaddr.sin_port = htons(VIDEO_SOCKET_PORT);
    int status;
#if 1
    int value = 1;


    int nRecvBufLen = 300 * 1024; //设置为32K
    status = setsockopt(videofd, SOL_SOCKET, SO_RCVBUF, (char *) &nRecvBufLen, sizeof(int));

    int nAddr = 1;
    //setsockopt(videofd, SOL_SOCKET, SO_REUSEADDR, &nAddr, sizeof(int));
    int nPorta = 1;
    //setsockopt(videofd, SOL_SOCKET, SO_REUSEPORT, &nPorta, sizeof(int));

#endif

    if (::bind(videofd, (struct sockaddr *) &myaddr,
               sizeof(myaddr)) < 0) {
        LOGE("bind failed! (%s)", strerror(errno));
        shutdown(videofd, 0);
        close(videofd);
        videofd = -1;
        return -5;
    }

    indexForPacket = 0;
    return 0;
}


bool MySonix::F_GetResolution(void) {

    sendGetCfgCmd();
    //usleep(100000);
    ssize_t nbytes;
    int size;
    struct sockaddr_in servaddr;
    bzero((char *) &servaddr, sizeof(servaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(COMMAND_SOCKET_PORT);

    size = sizeof(servaddr);
    struct timeval timeoutA = {0, 1000 * 210};     //20ms
    int nError;
    memset(readBuff_cfg, 0, 100);
    setsockopt(commandfd, SOL_SOCKET, SO_RCVTIMEO, (char *) &timeoutA, sizeof(struct timeval));
    if ((nbytes = recvfrom(commandfd, readBuff_cfg, 100, 0, (struct sockaddr *) &servaddr,
                           (socklen_t *) &size)) < 0) {

        b480 = false;
    } else {
        if (nbytes >= 48) {
            unsigned char *p = (unsigned char *) readBuff_cfg;
            int n = readBuff_cfg[41] + readBuff_cfg[42] * 0x100;
            if (n == 480) {
                b480 = true;
            } else {
                b480 = false;
            }
        } else {
            b480 = false;
        }
    }
    return b480;
}
//extern int nGetData_;
void onGetVideoData(void);
void *MySonix::doReceive(void *dat) {
    MySonix *self = (MySonix *) dat;
    ssize_t nbytes; /* the number of read **/
    int size;    /* the length of servaddr */
    struct sockaddr_in servaddr; /* the server's full addr */
    bzero((char *) &servaddr, sizeof(servaddr));
    //servaddr.sin_family = AF_INET;
    //servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    //servaddr.sin_port = htons(VIDEO_SOCKET_PORT);

    memset(self->readBuff, 0, PACKET_SIZE + 4);
    fd_set rfd;     // 读描述符集
    //nGetData_ = 0;
    while (!self->isCancelled) {

        struct timeval timeoutA = {0, 200};     //
        FD_ZERO(&rfd); // 在使用之前总是要清空
        FD_SET(self->videofd, &rfd); // 把socka放入要测试的描述符集中
        int nRet = select(self->videofd + 1, &rfd, nullptr, nullptr, &timeoutA);// 检测是否有套接口是否可读

        if (nRet > 0) {
            int nRecEcho = 0;
            if (FD_ISSET(self->videofd, &rfd)) {
                if ((nbytes = recvfrom(self->videofd, self->readBuff, PACKET_SIZE + 4, 0,
                                       (struct sockaddr *) &servaddr, (socklen_t *) &size)) < 0) {
                    if(nbytes>0)
                        onGetVideoData();
                    continue;
                }
            }
        } else {
            continue;
        }
        /*
        size = sizeof(servaddr);
        struct timeval timeoutA = {0, 1000 * 10};     //20ms
        int nError;
        setsockopt(self->videofd, SOL_SOCKET, SO_RCVTIMEO, (char *) &timeoutA,
                   sizeof(struct timeval));
        if ((nbytes = recvfrom(self->videofd, self->readBuff, PACKET_SIZE + 4, 0,
                               (struct sockaddr *) &servaddr, (socklen_t *) &size)) < 0) {
            usleep(2);
            continue;
        }
         */

#ifdef D_DEBUG
        self->fuc_getDAta(nullptr,0);
#else
        self->parsePacket(self->readBuff, nbytes);
#endif


    }
    return nullptr;

}

void *MySonix::doDisplay(void *dat) {
    MySonix *self = (MySonix *) dat;
    while (!self->isCancelled) {
        usleep(10);
        pthread_mutex_lock(&mutex);
        if (!self->myFrameList.empty()) {
            MyFrame *frame = (MyFrame *) (*self->myFrameList.begin());
            if (frame != nullptr && self->fuc_getDAta != nullptr) {
                self->fuc_getDAta((char *) frame->data, frame->nLen);
            }
            self->myFrameList.pop_front();
            if (frame != nullptr)
                delete frame;
        }
        pthread_mutex_unlock(&mutex);

    }
    return nullptr;


}

void MySonix::parsePacket(char *packetb, int length) {

    if (length != PACKET_SIZE + 4) {
        return;
    }

    unsigned char *packet_ = (unsigned char *) packetb;
    if (packet_[PACKET_SIZE + 1] == 0xda && packet_[PACKET_SIZE] == 0xff) {
        vector<char>().swap(mjpgPacket);      //Clear mjpgPacket
        mjpgPacket.reserve(64 * 1024);
        mIsFirstPacket = true;
        vector<char> v(packet_, packet_ + PACKET_SIZE);
        std::copy(v.begin(), v.end(), std::back_inserter(mjpgPacket));
        indexForPacket = 1;
        return;
    }
    if (mIsFirstPacket) {
        if (packet_[PACKET_SIZE + 1] == 0xdd && packet_[PACKET_SIZE] == 0xff) {
            int nPack = ((int) (packet_[PACKET_SIZE + 2])) << 8;
            nPack |= packet_[PACKET_SIZE + 3];
            if (indexForPacket == nPack) {
                vector<char> v(packet_, packet_ + PACKET_SIZE);
                std::copy(v.begin(), v.end(), std::back_inserter(mjpgPacket));
                indexForPacket++;
            } else {
                mIsFirstPacket = false;
            }
        } else if (packet_[PACKET_SIZE + 1] == 0xd9) {
            int df = packet_[PACKET_SIZE];
            int nPack = ((int) (packet_[PACKET_SIZE + 2])) << 8;
            nPack |= packet_[PACKET_SIZE + 3];
            if (indexForPacket == nPack) {
                vector<char> v(packet_, packet_ + PACKET_SIZE);
                std::copy(v.begin(), v.end(), std::back_inserter(mjpgPacket));
                indexForPacket++;
                mIsFirstPacket = false;

                QNumber = packet_[PACKET_SIZE];
                _qValue = packet_[PACKET_SIZE] * 5 + 5;
                byte *header = nullptr;
                //  header =(byte *)mJPEGHeaderData;          //mQParameterCF10;
                if (_qValue == 5) { ;
                } else if (_qValue == 10) {
                    //    memcpy(header+0x1cd,mQParameterCF10,129);
                    header = (byte *) mQParameterCF10;
                    //nLenHead = sizeof(mQParameterCF10);
                } else if (_qValue == 15) {
                    //memcpy(header+0x1cd,mQParameterCF15,129);
                    header = (byte *) mQParameterCF15;
                } else if (_qValue == 20) {
                    //memcpy(header+0x1cd,mQParameterCF20,129);
                    header = (byte *) mQParameterCF20;
                } else if (_qValue == 25) {
                    //memcpy(header+0x1cd,mQParameterCF25,129);
                    header = (byte *) mQParameterCF25;
                } else if (_qValue == 30) {
                    //memcpy(header+0x1cd,mQParameterCF30,129);
                    header = (byte *) mQParameterCF30;
                } else if (_qValue == 35) {
                    //memcpy(header+0x1cd,mQParameterCF35,129);
                    header = (byte *) mQParameterCF35;
                } else if (_qValue == 40) {
                    //memcpy(header+0x1cd,mQParameterCF40,129);
                    header = (byte *) mQParameterCF40;
                } else if (_qValue == 45) {
                    //memcpy(header+0x1cd,mQParameterCF45,129);
                    header = (byte *) mQParameterCF45;
                } else if (_qValue == 50) {
                    //memcpy(header+0x1cd,mQParameterCF50,129);
                    header = (byte *) mQParameterCF50;
                } else {
                    header = nullptr;
                }
                if (mjpgPacket.size() > 212 && header != nullptr) {
#if 0
                    pthread_mutex_lock(&mutex);
                    MyFrame *frame = merageMJPGHeader((char *) header, 1024, &(mjpgPacket[212]),
                                                      mjpgPacket.size() - 212);
                    myFrameList.push_back(frame);
                    pthread_mutex_unlock(&mutex);
#else
                    MyFrame *frame = merageMJPGHeader((char *) header, 1024, &(mjpgPacket[212]),
                                                      mjpgPacket.size() - 212);
                    if (frame != nullptr && fuc_getDAta != nullptr) {
                        fuc_getDAta((char *) frame->data, frame->nLen);
                    }
                    if (frame != nullptr)
                        delete frame;
#endif

                } else {
                    vector<char>().swap(mjpgPacket);   //clear mjpgPacket
                }
            } else
                mIsFirstPacket = false;
        }
    }
}


MyFrame *MySonix::merageMJPGHeader(char *header, int nHeadlen, char *data, int nLen) {
    int ix;
    vector<char>().swap(mjpgFrame);   //clear mjpgPacket

    if (header != nullptr) {
        vector<char> v(header, header + nHeadlen);
        std::copy(v.begin(), v.end(), std::back_inserter(mjpgFrame));
    }
    if (data != nullptr) {
        vector<char> v(data, data + nLen);
        std::copy(v.begin(), v.end(), std::back_inserter(mjpgFrame));
    }
    //char *frame_ =(char *)&(mjpgFrame[0]);
    MyFrame *frame = new MyFrame();
    frame->data = (uint8_t * )
    new char[mjpgFrame.size()];
    frame->nLen = mjpgFrame.size();
    memcpy(frame->data, &mjpgFrame[0], frame->nLen);
    vector<char>().swap(mjpgFrame);
    return frame;
}

void MySonix::StartReceive(void) {
    isCancelled = false;
    mIsFirstPacket = false;

    int ret = 0;
    if (readid == -1) {
        ret = pthread_create(&readid, nullptr, doReceive, (void *) this); // 成功返回0，错误返回错误编号
    }

    /*
    if(readid_cfg ==-1)
    {
       ret = pthread_create(&readid_cfg, nullptr, doReceive_Cfg,(void *) this); // 成功返回0，错误返回错误编号
    }
     */

    if (dispid == -1) {
        ret = pthread_create(&dispid, nullptr, doDisplay, (void *) this); // 成功返回0，错误返回错误编号

    }
    if (ret != 0) {
        dispid = -1;
    }

}


int MySonix::createCommandSocket(void) {

    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = 1000 * 10;
    struct sockaddr_in myaddr;

    if (uartCommandfd < 0) {
        uartCommandfd = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
        if (uartCommandfd >= 0) {
            setsockopt(uartCommandfd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));

            if(nWifiInterface!=-1) {
                setsockopt(uartCommandfd, IPPROTO_IP, SO_BINDTODEVICE, &nWifiInterface,sizeof(nWifiInterface));
            }

        }
    }

    if (commandfd > 0) {
        LOGE("I Opend!!! ");
        return -2;
    }
    commandfd = -1;

    /* Create the UDP socket */
    if ((commandfd = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP)) < 0) {
        LOGE("Failed to create socket");
        return -1;
    }

    if(nWifiInterface!=-1) {
        setsockopt(commandfd, IPPROTO_IP, SO_BINDTODEVICE, &nWifiInterface,
                          sizeof(nWifiInterface));
    }
  //  setsockopt(commandfd, SOL_SOCKET, SO_BINDTODEVICE, wlan, strlen(wlan));
    // set timeout to 1 seconds.

    tv.tv_sec = 0;
    tv.tv_usec = 500000;
    if (setsockopt(commandfd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0) {
        LOGE("Failed to setsockopt\n");
        shutdown(commandfd, 0);
        close(commandfd);
        commandfd = -1;
        return -1;
    }

    //chinwei 20160503


    bzero((char *) &myaddr, sizeof(myaddr));
    myaddr.sin_family = AF_INET;
    myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    myaddr.sin_port = htons(0);

#if  1
    int value = 1;
    int status;
    //status = setsockopt(commandfd, SOL_SOCKET, SO_REUSEADDR, &value, sizeof(value));

    value = 1;
#if 0
    status = setsockopt(commandfd, SOL_SOCKET, SO_REUSEPORT, &value, sizeof(value));
  //  if (status)
  //  {
  //          LOGE("SO_REUSEPORT failed! (%s)", strerror(errno));
  //          shutdown(commandfd, 0);
  //          close(commandfd);
  //          commandfd = -1;
  //          return -1;
  //  }
#endif
#endif

    _alreadyBind = true;
    _isWaiting = true;
    return 0;
}


int F_SendStatus2Jave();

int F_SendKey2Jave(int nKey);

extern uint8_t nSDStatus;

void *MySonix::doReceive_cmd(void *dat) {

    MySonix *self = (MySonix *) dat;
    char readBuff[4];
    ssize_t nbytes; /* the number of read **/
    int size;    /* the length of servaddr */
    struct sockaddr_in servaddr; /* the server's full addr */
    bzero((char *) &servaddr, sizeof(servaddr));


    int nKey = 0;
    int KeySnap = 0;
    int KeyRec = 0;
    bool bNeedSend = false;
    memset(readBuff, 0, 4);
    while (true) {
        int nStatus;
        size = sizeof(servaddr);
        struct timeval timeoutA = {0, 1000 * 10};     //20ms
        int nError;
        if (self->udp_socket < 0) {
            break;
        }
        setsockopt(self->udp_socket, SOL_SOCKET, SO_RCVTIMEO, (char *) &timeoutA,
                   sizeof(struct timeval));
        nbytes = recvfrom(self->udp_socket, readBuff, 2, 0, (struct sockaddr *) &servaddr,
                          (socklen_t *) &size);
        if (nbytes <= 0) {
            if (nbytes == 0) {
                int error = errno;
                if (error == EAGAIN) {
                    usleep(2);
                    continue;
                } else {
                    break;
                }

            } else {
                continue;
            }
        } else {
            if (nbytes == 2) {
                if (readBuff[0] == 0x55) {
                    nKey = 0;
                    if ((readBuff[1] & 0x01) != 0) {
                        if (KeySnap == 0) {
                            nKey |= 0x10;
                            KeySnap = 1;
                            bNeedSend = true;
                        }
                    } else {
                        if (KeySnap != 0) {
                            bNeedSend = true;
                        }
                        KeySnap = 0;
                    }
                    if ((readBuff[1] & 0x02) != 0) {
                        if (KeyRec == 0) {
                            KeyRec = 1;
                            nKey |= 0x08;
                            bNeedSend = true;
                        }

                    } else {
                        if (KeyRec != 0) {
                            bNeedSend = true;
                        }
                        KeyRec = 0;
                    }
                    if (bNeedSend) {
                        bNeedSend = false;
                        F_SendKey2Jave(nKey);
                    }
                }
            }
        }
    }
    return nullptr;
}


void MySonix::F_CreateRevSocket_and_Listen(void) {

    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = 1000 * 10;
    struct sockaddr_in myaddr;

    if (udp_socket > 0) {
        return;
    }
    udp_socket = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
    if (udp_socket > 0) {
      //  setsockopt(rev_socket, SOL_SOCKET, SO_BINDTODEVICE, wlan, strlen(wlan));
        setsockopt(udp_socket, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));

        if(nWifiInterface!=-1) {
            setsockopt(udp_socket, IPPROTO_IP, SO_BINDTODEVICE, &nWifiInterface,
                              sizeof(nWifiInterface));
        }
    } else {
        return;
    }

    bzero((char *) &myaddr, sizeof(myaddr));
    myaddr.sin_family = AF_INET;
    myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    myaddr.sin_port = htons(0x7310);

    if (::bind(udp_socket, (struct sockaddr *) &myaddr, sizeof(myaddr)) < 0) {
        printf("rev_socket bind failed!\n");
        shutdown(udp_socket, 0);
        close(udp_socket);
        udp_socket = -1;
        return;
    }

    int ret = -1;
    if (rev_cmd_thread  == -1)
    {
        ret = pthread_create(&rev_cmd_thread, nullptr, doReceive_cmd,
                             (void *) this); // 成功返回0，错误返回错误编号
        if (ret != 0) {
            rev_cmd_thread = -1;
        }
    }

}


extern bool bWhitClolor;

void Adj23D(AVFrame *src, AVFrame *des) {
    int i = 0;
    int hw = src->width >> 1;
    int hh = src->height >> 1;

    int deshw = des->width >> 1;

    byte *pdes;
    byte *pdes1;
    byte *psrc;
    byte *psrc1;

    pdes = (byte *) (des->data[0]);
    psrc = (byte *) (src->data[0]);

    byte *srcp;
    byte *desp;

    int ha = des->height / 4;

    if (bWhitClolor) {
        memset(des->data[0], 235,
               (size_t) des->width * des->height);                                 //yuv 白色色
        memset(des->data[1], 128, (size_t) des->width * des->height / 4);
        memset(des->data[2], 128, (size_t) des->width * des->height / 4);
    } else {
        memset(des->data[0], 16,
               (size_t) des->width * des->height);                                 //yuv 黑色
        memset(des->data[1], 128, (size_t) des->width * des->height / 4);
        memset(des->data[2], 128, (size_t) des->width * des->height / 4);
    }


    int dat = ha * des->width;

    pdes += dat;
    for (i = 0; i < src->height; i++) {

        memcpy(pdes, psrc, (size_t) src->width - 1);
        memcpy(pdes + src->width, psrc, (size_t) src->width);
        pdes += des->width;
        psrc += src->width;


    }
    ha = des->height / 8;
    pdes = des->data[1];
    psrc = src->data[1];

    pdes1 = des->data[2];
    psrc1 = src->data[2];
    for (i = 0; i < hh; i++) {

        srcp = psrc + i * hw;
        desp = pdes + (i + ha) * deshw;

        memcpy(desp, srcp, (size_t) hw);
        memcpy(desp + hw, srcp, (size_t) hw);


        srcp = psrc1 + i * hw;
        desp = pdes1 + (i + ha) * deshw;

        memcpy(desp, srcp, (size_t) hw);
        memcpy(desp + hw, srcp, (size_t) hw);
    }

}
